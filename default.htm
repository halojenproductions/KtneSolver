<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">

<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<title>KTNE Solver</title>
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet"
		integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous" />
	<style>
		* {
			font-family: Consolas, "Courier New", Courier, monospace;
		}

		body {
			background-color: black;
		}

		.module {
			min-width: 350px;
		}

		input[type="text"],
		#passwd_solution {
			color: rgb(0, 255, 0) !important;
			text-transform: uppercase;
		}

		input[type="text"]:focus {
			border-color: #00ff00;
			box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(0, 255, 0, 0.6);
		}

		input.btn-check:not(:checked)+.btn.colour-blue {
			color: #0d6efd;
		}

		input.btn-check:checked+.btn.colour-blue {
			background-color: #0d6efd;
		}

		input.btn-check:not(:checked)+.btn.colour-white {
			color: #f8f9fa;
		}

		input.btn-check:checked+.btn.colour-white {
			background-color: #adb5bd;
		}

		input.btn-check:not(:checked)+.btn.colour-yellow {
			color: #ffc107;
		}

		input.btn-check:checked+.btn.colour-yellow {
			background-color: #ffc107;
		}

		input.btn-check:not(:checked)+.btn.colour-red {
			color: #dc3545;
		}

		input.btn-check:checked+.btn.btn.colour-red {
			background-color: #dc3545;
		}
	</style>
</head>

<body onload="setup()">
	<div class="container-fluid">
		<div class="row align-items-start">
			<div class="col-auto col-md-3 col-xl-2 px-sm-2 px-0 bg-dark position-sticky top-0 start-0">
				<div class="d-flex flex-column align-items-left align-items-sm-start px-3 pt-2 min-vh-100">
					<p>
						Version: 1<br />
						Verification Code: 241
					</p>
					<ul class="nav nav-pills flex-column mb-auto">
						<li class="nav-item">
							<a class="nav-link" href="#BasicWires">Basic wires</a>
						</li>
						<li class="nav-item">
							<a class="nav-link" href="#MissileButton">Button</a>
						</li>
						<li class="nav-item">
							<a class="nav-link" href="https://bombmanual.com/web/index.html#Keypads"
								target="_blank">Keypad</a>
						</li>
						<li class="nav-item">
							<a class="nav-link" href="https://bombmanual.com/web/index.html#SimonSays"
								target="_blank">Simon Says</a>
						</li>
						<li class="nav-item">
							<a class="nav-link" href="https://bombmanual.com/web/index.html#WhosOnFirst"
								target="_blank">Who's On First</a>
						</li>
						<li class="nav-item">
							<a class="nav-link" href="https://bombmanual.com/web/index.html#Memory"
								target="_blank">Memory</a>
						</li>
						<li class="nav-item">
							<a class="nav-link" href="https://bombmanual.com/web/index.html#MorseCode"
								target="_blank">Morse Code</a>
						</li>
						<li class="nav-item">
							<a class="nav-link" href="https://bombmanual.com/web/index.html#ComplicatedWires"
								target="_blank">Complicated Wires</a>
						</li>
						<li class="nav-item">
							<a class="nav-link" href="https://bombmanual.com/web/index.html#WireSequences"
								target="_blank">Wire Sequences</a>
						</li>
						<li class="nav-item">
							<a class="nav-link" href="https://bombmanual.com/web/index.html#Mazes"
								target="_blank">Mazes</a>
						</li>
						<li class="nav-item">
							<a class="nav-link" href="#Password">Password</a>
						</li>
					</ul>
				</div>
			</div>

			<div class="col">
				<div class="row">
					<div class="col-12 pt-3">
						<!-- <div class=" w-100 "> -->
						<h3>Keep Talking and Nobody Explodes</h3>
						<!-- </div> -->
					</div>
				</div>
				<div class="row">
					<div class="col module pt-3" id="MissileButton">
						<div class="card">
							<div class="card-header">Button</div>
							<div class="card-body" id="">
								<div class="btn-group-vertical align-top" role="group">
									<input type="radio" class="btn-check blue" name="button_colour" id="button_colour1"
										autocomplete="off" />
									<label class="btn btn-outline-primary colour-blue" for="button_colour1">Blue</label>

									<input type="radio" class="btn-check" name="button_colour" id="button_colour2"
										autocomplete="off" />
									<label class="btn btn-outline-primary colour-white"
										for="button_colour2">White</label>

									<input type="radio" class="btn-check" name="button_colour" id="button_colour3"
										autocomplete="off" />
									<label class="btn btn-outline-primary colour-yellow"
										for="button_colour3">Yellow</label>

									<input type="radio" class="btn-check" name="button_colour" id="button_colour4"
										autocomplete="off" />
									<label class="btn btn-outline-primary colour-red" for="button_colour4">Red</label>
								</div>

								<div class="btn-group-vertical align-top" role="group">
									<input type="radio" class="btn-check" name="button_word" id="button_word1"
										autocomplete="off" />
									<label class="btn btn-outline-primary" for="button_word1">Abort</label>

									<input type="radio" class="btn-check" name="button_word" id="button_word2"
										autocomplete="off" />
									<label class="btn btn-outline-primary" for="button_word2">Detonate</label>

									<input type="radio" class="btn-check" name="button_word" id="button_word3"
										autocomplete="off" />
									<label class="btn btn-outline-primary" for="button_word3">Hold</label>
								</div>

								<div class="btn-group-vertical align-top d-none" role="group" id="button_batteries">
									<input type="radio" class="btn-check" name="button_batts" id="button_batts1"
										autocomplete="off" />
									<label class="btn btn-outline-primary" for="button_batts1">No cells</label>

									<input type="radio" class="btn-check" name="button_batts" id="button_batts2"
										autocomplete="off" />
									<label class="btn btn-outline-primary" for="button_batts2">>1 cell</label>

									<input type="radio" class="btn-check" name="button_batts" id="button_batts3"
										autocomplete="off" />
									<label class="btn btn-outline-primary" for="button_batts3">>2 cells</label>
								</div>

								<div class="btn-group-vertical align-top d-none" role="group" id="button_car">
									<input type="radio" class="btn-check" name="button_car" id="button_car1"
										autocomplete="off" />
									<label class="btn btn-outline-primary" for="button_car1">No CAR</label>

									<input type="radio" class="btn-check" name="button_car" id="button_car2"
										autocomplete="off" />
									<label class="btn btn-outline-primary" for="button_car2">CAR</label>
								</div>

								<div class="btn-group-vertical align-top d-none" role="group" id="button_frk">
									<input type="radio" class="btn-check" name="button_frk" id="button_frk1"
										autocomplete="off" />
									<label class="btn btn-outline-primary" for="button_frk1">No FRK</label>

									<input type="radio" class="btn-check" name="button_frk" id="button_frk2"
										autocomplete="off" />
									<label class="btn btn-outline-primary" for="button_frk2">FRK</label>
								</div>

								<hr />
								<div class="text-success" id="button_solution"></div>

								<script>
									function button_solve() {
										var hold = false;
										var click = false;
										var show = { batts: false, car: false, frk: false };

										var button_batteries = document.getElementById("button_batteries");
										var button_car = document.getElementById("button_car");
										var button_frk = document.getElementById("button_frk");

										var state = {
											abort: document.getElementById("button_word1").checked,
											detonate: document.getElementById("button_word2").checked,
											hold: document.getElementById("button_word3").checked,
											blue: document.getElementById("button_colour1").checked,
											white: document.getElementById("button_colour2").checked,
											yellow: document.getElementById("button_colour3").checked,
											red: document.getElementById("button_colour4").checked,
											battNone: document.getElementById("button_batts1").checked,
											battMoreThan1: document.getElementById("button_batts2").checked,
											battMoreThan2: document.getElementById("button_batts3").checked,
											carNo: document.getElementById("button_car1").checked,
											carYes: document.getElementById("button_car2").checked,
											frkNo: document.getElementById("button_frk1").checked,
											frkYes: document.getElementById("button_frk2").checked,
										};

										if (state.blue && state.abort) { // 1
											hold = true;
										} else if (state.detonate) { // 2
											show.batts = true;
											if (state.battMoreThan1) {
												click = true;
											}
										} else if (state.white) { // 3
											show.car = true;
											if (state.carYes) {
												hold = true;
											}
										} else { // 4
											show.batts = true;
											show.frk = true;
											if (state.battMoreThan2 && state.frkYes) {
												click = true;
											} else if (state.yellow) { // 5
												hold = true;
											} else if (state.red && state.hold) { // 6
												click = true;
											} else {
												hold = true;
											}
										}

										visible(button_batteries, show.batts);
										visible(button_car, show.car);
										visible(button_frk, show.frk);

										battInfoNeeded = () => show.batts && !(state.battNone || state.battMoreThan1 || state.battMoreThan2);
										carInfoNeeded = () => show.car && !(state.carNo || state.carYes);
										frkInfoNeeded = () => show.frk && !(state.frkNo || state.frkYes);

										if ((battInfoNeeded() || carInfoNeeded() || frkInfoNeeded())) {
											console.log("No solution");
											document.getElementById("button_solution").innerHTML = "";
										} else {
											if (click) {
												console.log("Click it");
												document.getElementById("button_solution").innerHTML = "Click";
											} else if (hold) {
												console.log("Hold it");
												document.getElementById("button_solution").innerHTML = `Blue strip: 4 <br>
														Yellow strip: 5 <br>
														Else: 1`;
											}
										}
									}
								</script>
							</div>
						</div>
					</div>

					<div class="col module pt-3" id="basicwires">
						<div class="card">
							<div class="card-header">Basic wires</div>
							<div class="card-body" id="basicwires_inputs">
								<script type="text/javascript">
									var basicwires_inputs = document.getElementById("basicwires_inputs");
									var colours = [["Red", "red"], ["Blue", "blue"], ["Yellow", "yellow"], ["Black", "black"], ["White", "white"]];

									for (i = 1; i <= 6; i++) {
										var group = document.createElement("div");
										group.className = "btn-group btn-group-sm d-flex";
										group.setAttribute("role", "group");

										// var label = document.createElement("label");
										// label.className = `btn-label`;
										// label.appendChild(document.createTextNode(`Wire ${i}`));
										// group.appendChild(label);

										for (ii = 0; ii < 5; ii++) {
											var input = document.createElement("input");
											input.id = `basicwires_${i}_${ii}`;
											input.className = `btn-check basicwires basicwires_${colours[ii][1]}`;
											input.setAttribute("type", "radio");
											input.setAttribute("name", `basicwires_${i}`);
											input.setAttribute("autocomplete", "off");
											input.setAttribute("value", `${colours[ii][1]}`);

											var label = document.createElement("label");
											label.className = `btn btn-outline-primary flex-grow-1 colour-${colours[ii][1]}`;
											label.setAttribute("for", `basicwires_${i}_${ii}`);
											label.appendChild(document.createTextNode(`${colours[ii][0]}`));

											group.appendChild(input);
											group.appendChild(label);
										}

										basicwires_inputs.appendChild(group);
									}
								</script>
								<hr />
								<div class="text-success" id="basicwires_solution"></div>
							</div>
						</div>
					</div>

					<div class="col module pt-3" id="Password">
						<div class="card">
							<div class="card-header">Password</div>
							<div class="card-body">
								<div class="input-group">
									<input id="passwd_letters1" placeholder="1" type="text" onkeyup="passwd_solve()"
										class="possible form-control" />
									<input id="passwd_letters2" placeholder="2" type="text" onkeyup="passwd_solve()"
										class="possible form-control" />
									<input id="passwd_letters3" placeholder="3" type="text" onkeyup="passwd_solve()"
										class="possible form-control" />
									<input id="passwd_letters4" placeholder="4" type="text" onkeyup="passwd_solve()"
										class="possible form-control" />
									<input id="passwd_letters5" placeholder="5" type="text" onkeyup="passwd_solve()"
										class="possible form-control" />
								</div>
								<hr />
								<div id="divSolution">
									<span id="passwd_solution"> </span>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<script>
		function setup() {
			// Password.
			Array.from(document.getElementsByClassName("possible")).forEach((element) => {
				element.addEventListener("keypress", passwd_jump);
			});

			// Missile buttons.
			Array.from(document.querySelectorAll("#MissileButton .btn")).forEach((element) => {
				element.addEventListener("click", buttonDeselect);
				element.addEventListener("click", () => setTimeout(button_solve));
			});

			// Basic wires.
			Array.from(document.querySelectorAll("#basicwires_inputs .btn")).forEach((element) => {
				element.addEventListener("click", buttonDeselect);
				element.addEventListener("click", () => setTimeout(basicwires_solve));
			});

		}

		const lookups = [
			"about", "after", "again", "below", "could",
			"every", "first", "found", "great", "house",
			"large", "learn", "never", "other", "place",
			"plant", "point", "right", "small", "sound",
			"spell", "still", "study", "their", "there",
			"these", "thing", "think", "three", "water",
			"where", "which", "world", "would", "write",
		];

		function passwd_solve(e) {
			var inputs = [
				document.getElementById("passwd_letters1").value.toLowerCase().split(""),
				document.getElementById("passwd_letters2").value.toLowerCase().split(""),
				document.getElementById("passwd_letters3").value.toLowerCase().split(""),
				document.getElementById("passwd_letters4").value.toLowerCase().split(""),
				document.getElementById("passwd_letters5").value.toLowerCase().split(""),
			];
			let matches = lookups.filter((lookupWord) => {
				let wordLetters = lookupWord.split("");

				let hasMatch = true;
				for (var i = 0; i < 5; i++) {
					hasMatch &&= inputs[i].length === 0 || inputs[i].includes(wordLetters[i]);
				}
				return hasMatch;
			});

			document.getElementById("passwd_solution").innerHTML = matches.join("<br>");
			console.log(matches);
		}

		function basicwires_solve(e) {

			const colour = {
				white: "white",
				yellow: "yellow",
				blue: "blue",
				red: "red",
				black: "black"
			};

			const cut = {
				last: "last",
				first: "first",
				second: "2nd",
				fourth: "4th",
				third: "3rd"
			};
			let counter = (c) =>
				document.querySelectorAll(`.basicwires_${c}:checked`).length;

			let count = {
				red: counter(colour.red),
				blue: counter(colour.blue),
				yellow: counter(colour.yellow),
				white: counter(colour.white),
				black: counter(colour.black),
				total: 0
			};

			lastwire = () => {
				w = document.querySelectorAll('.basicwires:checked');
				return w[w.length - 1].value;
			}

			count.total = count.red + count.blue + count.yellow + count.black + count.white;

			if (count.total < 3) {
				document.getElementById("basicwires_solution").innerHTML = "";
				return;
			}

			let result = [];
			switch (count.total) {
				case 3:
					{
						if (count.red == 0) {
							result.join(cut.second);
						}
						else if (lastwire() == colour.white) {
							result.push(cut.last);
						}
						else if (count.blue > 1) {
							result.push(`${cut.last} ${cut.blue}`);
						}
						else {
							result.push(cut.last);
						}
						break;
					}
				case 4:
					{
						if (count.red > 1) {
							result.push(`Serial odd ? ${cut.last} ${cut.red} : `);
						}
						if (lastwire() == colour.yellow && count.red == 0) {
							result.push(cut.first);
						}
						else if (count.blue == 1) {
							result.push(cut.first);
						}
						else if (count.yellow > 1) {
							result.push(cut.last);
						}
						else {
							result.push(cut.second);
						}
						break;
					}
				case 5:
					{
						if (lastwire() == colour.black) {
							result.push(`Serial odd ? ${cut.fourth} : `);
						}
						if (count.red == 1 && count.yellow > 1) {
							result.push(cut.first);
						}
						else if (count.black == 0) {
							result.push(cut.second);
						}
						else {
							result.push(cut.first);
						}
						break;
					}
				case 6:
					{
						if (count.yellow == 0) {
							result.push(`Serial odd ? ${cut.third} : `);
						}
						if (count.yellow == 1 && count.white > 1) {
							result.appendChild(cut.fourth);
						}
						else if (count.red == 0) {
							result.push(cut.last);
						}
						else {
							result.push(cut.fourth);
						}
						break;
					}
				default: {
					document.getElementById("basicwires_solution").innerHTML = "";
					return;
				}
			}

			console.log(`${result.join("")}`);
			document.getElementById("basicwires_solution").innerHTML = `Count= ${count.total}.<br />${result.join("")}`;
		}

		function passwd_jump(e) {
			if ("1234567890".includes(e.key)) {
				e.preventDefault();
				e.stopPropagation();
			}
			if ("12345".includes(e.key)) {
				document.getElementById(`passwd_letters${e.key}`).focus();
			}
		}

		function buttonDeselect(e) {
			if (document.getElementById(e.target.htmlFor).checked) {
				document.getElementById(e.target.htmlFor).checked = false;
				e.preventDefault();
			}
		}
		function visible(e, visible) {
			const className = "d-none";
			if (visible && e.classList.contains(className)) {
				e.classList.remove(className); // Show.
			} else if (!visible && !e.classList.contains(className)) {
				e.classList.add(className); // Hide.
			}
		}
		function show(e) {
			e.classList.remove("d-none"); // Show.
		}
		function hide(e) {
			e.classList.add("d-none"); // Hide.

		}
	</script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
		integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN"
		crossorigin="anonymous"></script>
	<script src="https://cdn.jsdelivr.net/npm/less"></script>
</body>

</html>